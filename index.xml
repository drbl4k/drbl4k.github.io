<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>drbl4k blogs</title>
    <link>https://drbl4k.github.io/</link>
    <description>Recent content on drbl4k blogs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 01 Aug 2025 08:17:26 +0530</lastBuildDate><atom:link href="https://drbl4k.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Client Side Decryption - Decrypting Hashed Request and Responses Part -1 (Web App Version)</title>
      <link>https://drbl4k.github.io/posts/client-side-decryption---decrypting-hashed-request-24186941a0fe8084a048f057f478a8df/</link>
      <pubDate>Fri, 01 Aug 2025 08:17:26 +0530</pubDate>
      
      <guid>https://drbl4k.github.io/posts/client-side-decryption---decrypting-hashed-request-24186941a0fe8084a048f057f478a8df/</guid>
      <description>We all must have encountered that one particular app which encrypts very single POST/GET request that is being sent. Worst part is that even the response received will be encrypted and cannot be viewed at proxy level (Inside Burp). Pretty annoying isn‚Äôt it. In today‚Äôs blog lets cover one of the cryptographic misconfigurations that took place on the encryption part and how I managed to get the decryption logic and expanded my capabilities further.</description>
      <content>&lt;p&gt;We all must have encountered that one particular app which encrypts very single POST/GET request that is being sent. Worst part is that even the response received will be encrypted and cannot be viewed at proxy level (Inside Burp). &lt;strong&gt;Pretty annoying isn‚Äôt it&lt;/strong&gt;. In today‚Äôs blog lets cover one of the cryptographic misconfigurations that took place on the encryption part and how I managed to get the decryption logic and expanded my capabilities further.&lt;/p&gt;
&lt;p&gt;The picture below is what the blog is gonna be about. (Just so you don‚Äôt wonder whether this is the right blogüòù)&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;1.jpeg&#34; src=&#34;https://drbl4k.github.io/images/decryption/1.jpeg&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Spoiler&lt;/strong&gt;&lt;/em&gt;: In this blog‚Äôs case I managed to find the static keys and iv and proceeded for further decryption. I &lt;strong&gt;used Chat-GPT&lt;/strong&gt; to make me a script for decryption. However, applications do encrypt and decrypt on runtime as well. We have to understand the logic of encryption in order to figure out the same &lt;em&gt;&lt;strong&gt;(#comingsoon)&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;base-logic&#34;&gt;&lt;em&gt;Base Logic&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;Let‚Äôs say we have an application and we are able view the data inside of it on the &lt;strong&gt;browser level&lt;/strong&gt;. Now at the &lt;strong&gt;proxy level&lt;/strong&gt;, things take a turn, as the request and response become &lt;strong&gt;encrypted&lt;/strong&gt; (unreadable). This it self means that, on the browser/front end code, there should be a logic present somewhere, to encrypt and decrypt the request and responses. Having this thing cleared is important in order to know what exactly are we looking for.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;What are we looking for?:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The logic of encryption and decryption. (Inside JavaScript files)&lt;/li&gt;
&lt;li&gt;Understand the algorithm and padding type.&lt;/li&gt;
&lt;li&gt;Understand how the key and iv are fetched and trace it back.&lt;/li&gt;
&lt;li&gt;Check if iv re-use takes place or a static iv is present. &lt;em&gt;&lt;strong&gt;(Big misconfiguration)&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since we know what we are looking for now, let‚Äôs dive into the techniques of decryption üòé&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;techniques&#34;&gt;&lt;em&gt;Techniques&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;Setup the Burpsuite and load the application and make a login request. This should have triggered all sorts of files/logic required for encryption and decryption. Now in the HTTP history, search for the following key words,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.encrypt&lt;/li&gt;
&lt;li&gt;.decrypt&lt;/li&gt;
&lt;li&gt;encfunction&lt;/li&gt;
&lt;li&gt;CryptoJS.AES&lt;/li&gt;
&lt;li&gt;.crypt&lt;/li&gt;
&lt;li&gt;encryptAes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The above keywords should lead you to some sort of encryption logic. Also when looking for key words, if you come across files like &lt;code&gt;crypto.min.js&lt;/code&gt;, then quite frankly that‚Äôs where the logic is gonna be. But in my case it was inside the &lt;code&gt;chunk.js&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Keyword:&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;keyword.png&#34; src=&#34;https://drbl4k.github.io/images/decryption/keyword.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Encryption Logic:&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;logic.jpeg&#34; src=&#34;https://drbl4k.github.io/images/decryption/logic.jpeg&#34;&gt;&lt;/p&gt;
&lt;p&gt;Based on the number of occurrences you might have to scroll through a lot of code to find the logic. In my case the logic is not obfuscated &lt;em&gt;(you can flag this as a security issue after successful decryption)&lt;/em&gt; . Now, since we found the logic lets go ahead and hook these functions via developer console. Open the dev console and navigate to ‚ÄúSources‚Äù. Search any particular term from the logic to find the function. hook whatever you feel like is the place of encryption. In my case I hooked at the lines shown in the below image. After hooking try refreshing or making a POST request to trigger the logic. Now you can hover over the key and the iv to get the values.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;2.jpeg&#34; src=&#34;https://drbl4k.github.io/images/decryption/2.jpeg&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;3.jpeg&#34; src=&#34;https://drbl4k.github.io/images/decryption/3.jpeg&#34;&gt;&lt;/p&gt;
&lt;p&gt;What do I have till now:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Got the Logic for both encryption and decryption.&lt;/li&gt;
&lt;li&gt;AES 128 CBC has been used.&lt;/li&gt;
&lt;li&gt;Pkcs5Pad padding has been used.&lt;/li&gt;
&lt;li&gt;The key and the iv are recoverable in Unit8Array format.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now before proceeding with the decryption part, let‚Äôs discuss where the developers had misconfigured. Its critical to understand to expands our capabilities.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;the-vulnerability&#34;&gt;&lt;em&gt;The vulnerability&lt;/em&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The application was using a &lt;strong&gt;static iv and a key&lt;/strong&gt; to encrypt and decrypt. Iv is something that should &lt;strong&gt;not be re-used&lt;/strong&gt; after a single encryption/decryption takes place. &lt;em&gt;(This should be flagged upon successful decryption)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;AES-CBC is an outdated encryption mode. the logic of it is easy to break.&lt;/li&gt;
&lt;li&gt;Even if the key and the iv is present in the form of Unit8Array, it still can be used for decryption.&lt;/li&gt;
&lt;li&gt;There was no obfuscation on the logic whatsoever. In most cases unlike a Unit8Array, you can find hardcoded keys which can directly be used for decryption.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;decrypting-everything&#34;&gt;&lt;em&gt;Decrypting Everything&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;Since we have the Unit8Array of both key and iv, I asked chat GPT to write me a html file with a decryption script for the identified logic. here is what it gave me:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;title&lt;/span&gt;&amp;gt;Offline AES-CBC Decryption&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;title&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://cdn.jsdelivr.net/npm/crypto-js@4.1.1/crypto-js.min.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;h2&lt;/span&gt;&amp;gt;Decryption Output&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;h2&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;pre&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;output&amp;#34;&lt;/span&gt;&amp;gt;Decrypting...&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;pre&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Replace with your actual Uint8Array key and IV
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;keyArray&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Uint8Array&lt;/span&gt;([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;add the array here&amp;#34;&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ivArray&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Uint8Array&lt;/span&gt;([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;add the array here&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ciphertextHex&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;acf94ec15f5ef42ec7994ee0e01c92a779682ab797330ee01dacd8a9c2fc5df7 &amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;decryptAES_CBC&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ciphertextHex&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;keyArray&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ivArray&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CryptoJS&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lib&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;WordArray&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;keyArray&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;iv&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CryptoJS&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lib&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;WordArray&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ivArray&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ciphertext&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CryptoJS&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;enc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Hex&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;parse&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ciphertextHex&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;decrypted&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CryptoJS&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;AES&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;decrypt&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        { &lt;span style=&#34;color:#a6e22e&#34;&gt;ciphertext&lt;/span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#a6e22e&#34;&gt;iv&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;iv&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#a6e22e&#34;&gt;mode&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CryptoJS&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;mode&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;CBC&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#a6e22e&#34;&gt;padding&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CryptoJS&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pad&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Pkcs7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;decrypted&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;CryptoJS&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;enc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Utf8&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;plaintext&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;decryptAES_CBC&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ciphertextHex&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;keyArray&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ivArray&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      document.&lt;span style=&#34;color:#a6e22e&#34;&gt;getElementById&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;output&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;innerText&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;plaintext&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[Decryption failed]&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      document.&lt;span style=&#34;color:#a6e22e&#34;&gt;getElementById&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;output&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;innerText&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt=&#34;5.jpeg&#34; src=&#34;https://drbl4k.github.io/images/decryption/5.jpeg&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;7.jpeg&#34; src=&#34;https://drbl4k.github.io/images/decryption/7.jpeg&#34;&gt;&lt;/p&gt;
&lt;p&gt;Post running this script on an the mentioned encrypted text, I was able to decrypt the values. Now this opens up a lot of possibilities for things like IDOR, SQL Injections etc. I just have to generate another script to encrypt the body with the same key and iv (impactful isn&amp;rsquo;t it).&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;key-takeaways&#34;&gt;&lt;em&gt;Key Takeaways&lt;/em&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Always look into the code, (cannot be bypassed XD)&lt;/li&gt;
&lt;li&gt;Analyze how keys are used and check whether they are static across multiple accounts/sessions.&lt;/li&gt;
&lt;li&gt;Its not bad to ask for help, (Ask AI).&lt;/li&gt;
&lt;li&gt;Be clear with padding types as they might cause failure of decryption&lt;/li&gt;
&lt;li&gt;encryption should not be the sole line of defense. Comprehensive security testing must be conducted for potential vulnerabilities at multiple levels.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/how-i-exploited-idor-encrypted-mobile-api-withfrida-george-joseph-rydjc/?trackingId=dwlmpvH4Qyil87BHWllpYw%3D%3D&#34;&gt;https://www.linkedin.com/pulse/how-i-exploited-idor-encrypted-mobile-api-withfrida-george-joseph-rydjc/?trackingId=dwlmpvH4Qyil87BHWllpYw%3D%3D&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Happy Hunting Fellas.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Yours Truly: DRBL4K&lt;/em&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Unusual Authentication and 2FA Bypasses (A Grey-Box Approach)</title>
      <link>https://drbl4k.github.io/posts/unusual-authentication-and-2fa-bypasses-a-grey-box-approach/</link>
      <pubDate>Fri, 01 Aug 2025 00:10:21 +0530</pubDate>
      
      <guid>https://drbl4k.github.io/posts/unusual-authentication-and-2fa-bypasses-a-grey-box-approach/</guid>
      <description>Authentication and 2FA bypasses have some ‚Äúusual‚Äù methodologies, and I would like to keep them under honorable mentions as we are not covering them today. Also when we talk about authentication &amp;amp; 2FA bypasses specifically, we often think about a scenario where we manage to log into an application/asset without valid verifier/password. That is what I have covered today.
Today‚Äôs blog is all about my experience with weird bypasses that I encountered during various pentest activities.</description>
      <content>&lt;p&gt;Authentication and 2FA bypasses have some ‚Äúusual‚Äù methodologies, and I would like to keep them under honorable mentions as we are not covering them today. Also when we talk about authentication &amp;amp; 2FA bypasses specifically, we often think about a scenario where we manage to log into an application/asset without valid verifier/password. That is what I have covered today.&lt;/p&gt;
&lt;p&gt;Today‚Äôs blog is all about my experience with weird bypasses that I encountered during various pentest activities. Yes the techniques are covered as well. &lt;em&gt;(#igotchu)&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;honorable-mentions&#34;&gt;Honorable Mentions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Auth/2FA bypass via &lt;strong&gt;typical&lt;/strong&gt; response manipulation (‚Äú200 OK‚Äù scenario)&lt;/li&gt;
&lt;li&gt;SQL injection for login bypasses. (OR 1=1 ‚Äî or something better)&lt;/li&gt;
&lt;li&gt;JWT with none algorithm set in the request. (Mostly outdated)&lt;/li&gt;
&lt;li&gt;OTP brute-force without rate limiting. (Typical test case)&lt;/li&gt;
&lt;li&gt;OTP reuse (extremely rare and a usual test case)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now keeping the above out of the way, let‚Äôs begin with the unusual stuff.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: the below shown POCs are not from a real world application. Keeping confidentiality in mind I tried to &lt;strong&gt;simulate&lt;/strong&gt; the same attacks over a &lt;strong&gt;secure environment&lt;/strong&gt;. However, the below discussed techniques were used in a real web application assessment.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&#34;authentication-bypass&#34;&gt;Authentication Bypass&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;An IDOR based authentication bypass (response manipulation):&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You can test this out in applications with multiple user roles/accounts where, the email and the role ID are returned in the response.&lt;/p&gt;
&lt;p&gt;Original Request:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Username&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pt-readonly&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Password&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SuperSecurePassword&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Original Response:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;success&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pt-readonly&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;roleID&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;4&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Simply try logging in with a set of credentials and intercept the response. Once the response is received, change the email and role ID to a different user &lt;em&gt;&lt;strong&gt;(this may vary as some apps might return only email and some generic parameters like date name etc.)&lt;/strong&gt;&lt;/em&gt; and forward the response. Now check weather the you logged in as a different user.&lt;/p&gt;
&lt;p&gt;Original Response:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;success&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pt-readonly&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;roleID&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;4&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Tampered Response:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;success&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pt-admin&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;roleID&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;sometimes just tampering the ‚ÄúroleID‚Äù might lead to privilege escalation, but that depends on various other factors.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;JWT None algorithm tampered in response (response manipulation):&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Lets say, you have done basic response manipulation, but you noticed that the server returns a token on a successful login. In this case, log into the application once and copy the token. Set the algorithm type to ‚ÄúNone‚Äù and remove the signature. Now try intercepting the response again with a wrong password, and paste the token parameter with the crafted token in the response and forward it. This may vary on the basis of signature. You may require a dummy one to be part of the crafted token in some apps.&lt;/p&gt;
&lt;p&gt;Original JWT:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InVzZXJAZXhhbXBsZS5jb20iLCJyb2xlIjoidXNlciIsInJvbGVfaWQiOiIxMDAyIiwiZXhwIjoxNzIyNDI1Mjc3fQ._Ml1VzOvHcmKHY2ElPBWjHbNdG56pYBvAhyHZdcSIAI
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
{&amp;#34;alg&amp;#34;: &amp;#34;HS256&amp;#34;,&amp;#34;typ&amp;#34;: &amp;#34;JWT&amp;#34;}.{&amp;#34;email&amp;#34;: &amp;#34;user@example.com&amp;#34;,&amp;#34;role&amp;#34;: &amp;#34;user&amp;#34;,&amp;#34;role_id&amp;#34;: &amp;#34;1002&amp;#34;,&amp;#34;exp&amp;#34;: 1722425277}._Ml1VzOvHcmKHY2ElPBWjHbNdG56pYBvAhyHZdcSIAI
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;None Alg JWT:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.eyJlbWFpbCI6ImFkbWluQGV4YW1wbGUuY29tIiwicm9sZSI6ImFkbWluIiwicm9sZV9pZCI6IjEwMDEiLCJleHAiOjE3MjI0MjUyNzd9.
---------------------------------------------------------------------------------------------------------------------------------------------
{&amp;#34;alg&amp;#34;: &amp;#34;none&amp;#34;,&amp;#34;typ&amp;#34;: &amp;#34;JWT&amp;#34;}.{&amp;#34;email&amp;#34;: &amp;#34;user@example.com&amp;#34;,&amp;#34;role&amp;#34;: &amp;#34;user&amp;#34;,&amp;#34;role_id&amp;#34;: &amp;#34;1002&amp;#34;,&amp;#34;exp&amp;#34;: 1722425277}.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Original Response:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;success&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;token&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InVzZXJAZXhhbXBsZS5jb20iLCJyb2xlIjoidXNlciIsInJvbGVfaWQiOiIxMDAyIiwiZXhwIjoxNzIyNDI1Mjc3fQ.._Ml1VzOvHcmKHY2ElPBWjHbNdG56pYBvAhyHZdcSIAI&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;roleID&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;4&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Bypass response:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;success&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;token&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.eyJlbWFpbCI6ImFkbWluQGV4YW1wbGUuY29tIiwicm9sZSI6ImFkbWluIiwicm9sZV9pZCI6IjEwMDEiLCJleHAiOjE3MjI0MjUyNzd9.&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;roleID&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;4&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Hardcoded token/credentials (JavaScript analysis):&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This one is pretty hard as most apps are secure enough not to include such blunders in code. But who knows? this was encountered personally by myself during a pentest üòé. Go to the Burp‚Äôs HTTP History and filter all the .js (JavaScript) &amp;amp; .json files. select a request and paste the username format/email/JWT regex. and move through the requests. there is 1 in a million chance for that.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;/image.png&#34; src=&#34;https://drbl4k.github.io/images/Unusual-Authentication-and-2FA-Bypases/image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;here is a list of regex that could help you out while searching for some hardcoded stuff,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;‚Äú^[a-zA-Z0-9]+([._-][a-zA-Z0-9]+)*@[a-zA-Z0-9-]+.[a-zA-Z]{2,}$‚Äù   ‚Äî &lt;strong&gt;Covers emails&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;‚ÄúeyJ[A-Za-z0-9_-]+?.[A-Za-z0-9_-]+?.[A-Za-z0-9_-]+‚Äù   ‚Äî &lt;strong&gt;Covers JWT tokens&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;‚Äú\b(?:(?:25[0-5]|2[0-4][0-9]|1?[0-9]{1,2}).){3}(?:25[0-5]|2[0-4][0-9]|1?[0-9]{1,2})\b‚Äù   ‚Äî &lt;strong&gt;IPv4 address&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;‚Äú\b(?:[A-Fa-f0-9]{1,4}:){7}[A-Fa-f0-9]{1,4}\b‚Äù  ‚Äî &lt;strong&gt;IPv6 address&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;two-factor-authentication-bypass&#34;&gt;Two Factor Authentication Bypass&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;(For this part I‚Äôm not covering usual things like brute force and response copy pate, identifying static OTPs as they will be usually identified by the Burp‚Äôs active scanner.&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;This is interesting because, the third one really was a new approach to OTP bypass which doesn‚Äôt involve touching the OTP at all (#tempting) ü§ì.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Downgrade APIs to lower version:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This one is pretty close to my heart, I found this downgrade issue across multiple apps where, upon downgrading the API version say from v2 to v1, I managed to revel some sensitive (unintended) information about the flow and this in most cases allow OTP brute forcing, response manipulation. Maybe in some cases a default OTP would be present for that particular version (Haven‚Äôt got but heard).&lt;/p&gt;
&lt;p&gt;Version 2 Request (Original):&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;POST /api/v2/verify-otp HTTP/1.1
Host: example.com
Content-Type: application/json
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

{
  &amp;#34;email&amp;#34;: &amp;#34;user@example.com&amp;#34;,
  &amp;#34;otp&amp;#34;: &amp;#34;927314&amp;#34;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Version 1 Request (Tampered):&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;POST /api/v1/verify-otp HTTP/1.1
Host: example.com
Content-Type: application/json
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

{
  &amp;#34;email&amp;#34;: &amp;#34;user@example.com&amp;#34;,
  &amp;#34;otp&amp;#34;: &amp;#34;927314&amp;#34;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Force Browsing Authenticated Page:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is a rare thing to find but still out there in the wild. &lt;strong&gt;A race condition&lt;/strong&gt; which allows to force browse the home page directly after the first level of Authentication &lt;em&gt;(password entry)&lt;/em&gt;. Let‚Äôs break this down.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;https://portswigger.net/web-security/race-conditions#session-based-locking-mechanisms&#34; src=&#34;https://drbl4k.github.io/images/Unusual-Authentication-and-2FA-Bypases/image2.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Source: &lt;a href=&#34;https://portswigger.net/web-security/race-conditions#session-based-locking-mechanisms&#34;&gt;https://portswigger.net/web-security/race-conditions#session-based-locking-mechanisms&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This happens because a multi step sequence takes place within the span of a single request. This means that the user temporarily has a valid session, but MFA isn&amp;rsquo;t yet being enforce. This allows an attacker to force browse the home page before entering the OTP.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Chaining Host Header Injection with OTP emails &lt;em&gt;(#Research):&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We all know that if an application is vulnerable to host header injection, we go straight to password reset functionalities to test the same for link poisoning and stuff. What if, an application takes an email to authenticate with an OTP later has this issue?. Imagine this in a black box application where you have a valid username and password, but 2FA ends up like this. &lt;em&gt;(Actively researching).&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;key-takeaways&#34;&gt;Key Takeaways&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Always tamper the response if emails/roles are returned for horizontal account bypasses&lt;/li&gt;
&lt;li&gt;Try setting a none algorithm token via response manipulation (if returned in response)&lt;/li&gt;
&lt;li&gt;Always look into the JavaScript files for exposures (Check files like main.js, index.js etc.)&lt;/li&gt;
&lt;li&gt;Always make sure to downgrade the APIs if higher numbers are present as current version.&lt;/li&gt;
&lt;li&gt;Make sure to force browse the authenticated page before entering the OTP/Passcode.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://portswigger.net/web-security/race-conditions#session-based-locking-mechanisms&#34;&gt;https://portswigger.net/web-security/race-conditions#session-based-locking-mechanisms&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://hackerone.com/reports/2463279&#34;&gt;https://hackerone.com/reports/2463279&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://hackerone.com/reports/1490470&#34;&gt;https://hackerone.com/reports/1490470&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.hackerone.com/blog/penetration-testing-api&#34;&gt;https://www.hackerone.com/blog/penetration-testing-api&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Happy Hunting Fellas.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Yours Truly: DRBL4K&lt;/em&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>In The Plain Sight - A Classic Filter Mistake</title>
      <link>https://drbl4k.github.io/posts/in-the-plain-sight/</link>
      <pubDate>Mon, 28 Jul 2025 21:10:21 +0530</pubDate>
      
      <guid>https://drbl4k.github.io/posts/in-the-plain-sight/</guid>
      <description>Prologue: Being in application security, I usually see mates making this one tiny mistake with their Burpsuite configuration. Lot of testers usually go with the default ‚ÄúHTTP History Filters‚Äù. In this blog I will cover the importance of the unchecked filters and how it helped me as well as fellow hackers out in the wild to attain ‚ÄúPath Traversal‚Äù and ‚ÄúServer-Side Request Forgery‚Äù in a real engagement.
Most of public reports (around 55%) in Hackerone indicate that, the components that are vulnerable to local file inclusions and SSRFs are identified to be either a functionality of an image/other files (ie: PDF, CSV, ZIP etc.</description>
      <content>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Prologue&lt;/strong&gt;&lt;/em&gt;: Being in application security, I usually see mates making this one tiny mistake with their Burpsuite configuration. Lot of testers usually go with the default  ‚ÄúHTTP History Filters‚Äù. In this blog I will cover the importance of the unchecked filters and how it helped me as well as fellow hackers out in the wild to attain &lt;strong&gt;‚ÄúPath Traversal‚Äù&lt;/strong&gt; and &lt;strong&gt;‚ÄúServer-Side Request Forgery‚Äù&lt;/strong&gt; in a real engagement.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;Most of public reports (&lt;em&gt;around 55%&lt;/em&gt;) in &lt;strong&gt;Hackerone&lt;/strong&gt; indicate that, the components that are vulnerable to local file inclusions and SSRFs are identified to be either a functionality of an image/other files &lt;code&gt;(ie: PDF, CSV, ZIP etc.)&lt;/code&gt; being loaded into the application through an external interaction &lt;code&gt;(ie: ?image=https://test.com/a.pdf)&lt;/code&gt; or fetched locally within the file system of the hosted application &lt;code&gt;(ie: ?filename=test.png)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;image.png&#34; src=&#34;https://drbl4k.github.io/images/In-the-plain-sight/image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Source: &lt;a href=&#34;https://vickieli.dev/ssrf/ssrf-in-the-wild/&#34;&gt;https://vickieli.dev/ssrf/ssrf-in-the-wild/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It‚Äôs fascinating, because, we as Pentesters usually go after the core functionalities of an application, (&lt;em&gt;Since it affects the business üò¢&lt;/em&gt;)  that could or couldn‚Äôt be vulnerable to such attacks, are really missing this perspective of attack vector all together. Let‚Äôs leave application pentest realm for a second, imagine conducting an external pentest, and encountering an application vulnerable to a full read SSRF attack and letting it slide because of the default filters. #horible&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I would like to share my experience on one of my recent pentest activity, where almost on the last day of the pentest I got hold of a path traversal vulnerability which led to disclosure of internal files.&lt;/p&gt;
&lt;p&gt;Real Application Details:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Microsoft IIS server v10&lt;/li&gt;
&lt;li&gt;Internal web app (Bound to be accessed within a restricted environment)&lt;/li&gt;
&lt;li&gt;Has multiple features to download CSV and ZIP files.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: the below shown POCs are not from a real world application. Keeping confidentiality in mind I tried to &lt;strong&gt;simulate&lt;/strong&gt; the same attacks over a &lt;strong&gt;secure environment&lt;/strong&gt;. However, the below discussed techniques were used in a real web application assessment.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;On the last day I usually go for analysis of images and other files like PDFs and Excel for metadata exposure and upon applying the Burpsuite filter, one endpoint stood out. It was an endpoint trying to fetch a .zip file from the internal file system.  Now obviously it won‚Äôt be visible in the HTTP history due to receiving a binary file &lt;strong&gt;(&lt;em&gt;garbage data&lt;/em&gt;)&lt;/strong&gt; as response. The request had an interesting parameter which was pulling a zip file &lt;code&gt;/download/zip?fnames=UserLog\admin.zip&amp;amp;sec=zip&lt;/code&gt;. It looked something like this in the simulated environment.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;4.png&#34; src=&#34;https://drbl4k.github.io/images/In-the-plain-sight/4.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Hmm, We all know what would have been my next move. Yes I tampered the &lt;code&gt;?fnames=&lt;/code&gt; parameter with the payload &lt;code&gt;..\..\..\..\..\testfile&lt;/code&gt; (Note, since the real request had a backslash with the file name, I used a traversal payload with backslashes). The real response for the request was a stack trace error indicating that &lt;code&gt;&amp;quot;The file was not found in the path E:\testfile&amp;quot;&lt;/code&gt;. &lt;strong&gt;(&lt;em&gt;Pro Tip: something as simple as a stack trace could reveal a lot about the backend. #fightwithdevs&lt;/em&gt;)&lt;/strong&gt; Bingo! as soon I got the error indicating the internal file path I figured out where I was, and, I tried to fetch the ‚Äúweb.config‚Äù file &lt;strong&gt;(&lt;em&gt;Its a default multi purpose configuration file for IIS servers&lt;/em&gt;)&lt;/strong&gt; from the ‚ÄúE:‚Äù directory with the following payload &lt;code&gt;..\..\..\..\..\web.config&lt;/code&gt;. It looked something like this.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;5.png&#34; src=&#34;https://drbl4k.github.io/images/In-the-plain-sight/5.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;6.png&#34; src=&#34;https://drbl4k.github.io/images/In-the-plain-sight/6.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;The web.config file usually throws an error of some kind (403 or 404 usually) if we try to access it directly through a web browser, but because of this path traversal vulnerability, I was able to access it and show the impact. In my case the file consisted details about the SMTP configuration with keys present in it. (&lt;em&gt;I was on top of the world&lt;/em&gt;)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Moral of the story, never trust any (&lt;em&gt;and I mean &lt;strong&gt;ANY&lt;/strong&gt;&lt;/em&gt;) of the functionalities. By assuming so, we may giveaway the chance to find something cool. Even something as simple as a &lt;strong&gt;default Burpsuite filter&lt;/strong&gt;, which hides images and binary data will act against us. Let‚Äôs be honest, who doesn‚Äôt want to find and exploit a local file inclusion or an SSRF? not me at least.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hackerone.com/reports/1888808&#34;&gt;https://hackerone.com/reports/1888808&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hackerone.com/reports/1427086&#34;&gt;https://hackerone.com/reports/1427086&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://vickieli.dev/ssrf/ssrf-in-the-wild/&#34;&gt;https://vickieli.dev/ssrf/ssrf-in-the-wild/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Happy Hunting Fellas.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Yours Truly: DRBL4K&lt;/em&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Fact</title>
      <link>https://drbl4k.github.io/posts/web-is-vulnerable/</link>
      <pubDate>Sun, 27 Jul 2025 21:10:21 +0530</pubDate>
      
      <guid>https://drbl4k.github.io/posts/web-is-vulnerable/</guid>
      <description>Web Is Vulnerable</description>
      <content>&lt;p&gt;Web Is Vulnerable&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
